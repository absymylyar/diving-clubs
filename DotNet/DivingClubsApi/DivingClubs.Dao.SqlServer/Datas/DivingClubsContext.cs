// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DivingClubs.Dao.SqlServer.Datas;

public partial class DivingClubsContext : DbContext
{
    public DivingClubsContext(DbContextOptions<DivingClubsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AddressEntity> AddressEntities { get; set; }

    public virtual DbSet<DivingClubEntity> DivingClubEntities { get; set; }

    public virtual DbSet<DivingGroupEntity> DivingGroupEntities { get; set; }

    public virtual DbSet<LicenceEntity> LicenceEntities { get; set; }

    public virtual DbSet<MonitorEntity> MonitorEntities { get; set; }

    public virtual DbSet<PersonEntity> PersonEntities { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AddressEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_9caf3f954ed5bc66e3fa35eb7e9");

            entity.ToTable("address_entity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("city");
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("street");
            entity.Property(e => e.StreetNumber)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("streetNumber");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("zipCode");
        });

        modelBuilder.Entity<DivingClubEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_a0ba471021cd92f7b8aca439d2b");

            entity.ToTable("diving_club_entity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("addressId");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("phoneNumber");

            entity.HasOne(d => d.Address).WithMany(p => p.DivingClubEntities)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_1637356d80ee0983b1a6405d5e3");
        });

        modelBuilder.Entity<DivingGroupEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_0e154f06dc1f6711e004bed2d01");

            entity.ToTable("diving_group_entity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClubId).HasColumnName("clubId");
            entity.Property(e => e.Date)
                .HasColumnType("date")
                .HasColumnName("date");
            entity.Property(e => e.MinimumRank).HasColumnName("minimumRank");
            entity.Property(e => e.MonitorId).HasColumnName("monitorId");

            entity.HasOne(d => d.Club).WithMany(p => p.DivingGroupEntities)
                .HasForeignKey(d => d.ClubId)
                .HasConstraintName("FK_cbc6051936752baf038d1f4d58e");

            entity.HasOne(d => d.Monitor).WithMany(p => p.DivingGroupEntities)
                .HasForeignKey(d => d.MonitorId)
                .HasConstraintName("FK_2f07619fea8b29150fc3985cf26");
        });

        modelBuilder.Entity<LicenceEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_f9a84f83fe09030040fdec51bbc");

            entity.ToTable("licence_entity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClubId).HasColumnName("clubId");
            entity.Property(e => e.DateEnd)
                .HasColumnType("datetime")
                .HasColumnName("dateEnd");
            entity.Property(e => e.DateStart)
                .HasColumnType("datetime")
                .HasColumnName("dateStart");
            entity.Property(e => e.PersonId).HasColumnName("personId");
            entity.Property(e => e.Rank).HasColumnName("rank");

            entity.HasOne(d => d.Club).WithMany(p => p.LicenceEntities)
                .HasForeignKey(d => d.ClubId)
                .HasConstraintName("FK_a398b388b4dde7807ddf5338f41");

            entity.HasOne(d => d.Person).WithMany(p => p.LicenceEntities)
                .HasForeignKey(d => d.PersonId)
                .HasConstraintName("FK_2b1ccb5c92f07daf1b7ece502d7");

            entity.HasMany(d => d.DivingGroupEntities).WithMany(p => p.LicenceEntities)
                .UsingEntity<Dictionary<string, object>>(
                    "LicenceEntityDivesDivingGroupEntity",
                    r => r.HasOne<DivingGroupEntity>().WithMany()
                        .HasForeignKey("DivingGroupEntityId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_83fe334a1f5e5b15aefb8f7ba5b"),
                    l => l.HasOne<LicenceEntity>().WithMany()
                        .HasForeignKey("LicenceEntityId")
                        .HasConstraintName("FK_9bbff3e53c69981ae0fcff59317"),
                    j =>
                    {
                        j.HasKey("LicenceEntityId", "DivingGroupEntityId").HasName("PK_273bf1b7348d8f6cf5d4e2b8756");
                        j.ToTable("licence_entity_dives_diving_group_entity");
                        j.HasIndex(new[] { "DivingGroupEntityId" }, "IDX_83fe334a1f5e5b15aefb8f7ba5");
                        j.HasIndex(new[] { "LicenceEntityId" }, "IDX_9bbff3e53c69981ae0fcff5931");
                        j.IndexerProperty<int>("LicenceEntityId").HasColumnName("licenceEntityId");
                        j.IndexerProperty<int>("DivingGroupEntityId").HasColumnName("divingGroupEntityId");
                    });
        });

        modelBuilder.Entity<MonitorEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ece81ef54bd5044e440fc13c1aa");

            entity.ToTable("monitor_entity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PersonId).HasColumnName("personId");
            entity.Property(e => e.Rank).HasColumnName("rank");

            entity.HasOne(d => d.Person).WithMany(p => p.MonitorEntities)
                .HasForeignKey(d => d.PersonId)
                .HasConstraintName("FK_b8ca1282687a0731664499caf45");
        });

        modelBuilder.Entity<PersonEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_5d10bb9afdbe876acc13e892469");

            entity.ToTable("person_entity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("addressId");
            entity.Property(e => e.BirthDate)
                .HasColumnType("datetime")
                .HasColumnName("birthDate");
            entity.Property(e => e.BloodGroup)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("bloodGroup");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("firstName");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("lastName");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("phoneNumber");

            entity.HasOne(d => d.Address).WithMany(p => p.PersonEntities)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_451aabeb8cd9cf6264d7aba9c27");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}